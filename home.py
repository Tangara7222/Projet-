import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import joblib
from sklearn.neighbors import KNeighborsRegressor


st.set_page_config(page_title='Modilo', page_icon='üöÄ') 
# Ajouter une image d'arri√®re-plan 
page_bg_img = ''' <style> [data-testid="stAppViewContainer"] { background-image: url("https://mobimg.b-cdn.net/v3/fetch/a4/a44b6eb557c05da374b1bcb7ffad8958.jpeg?w=1000&r=0.5625"); background-size: cover; } </style> ''' 
st.markdown(page_bg_img, unsafe_allow_html=True)


data = None
def main():
    st.header("**BIENVENU SUR NOTRE PLATFORME !**")
    st.title("ANALYSE ET PREDICTION DE DONNEES")
    st.subheader("Par Tangara Abdoulaye")

    choix = st.sidebar.radio("SousMenu",["Description","Documentation", "Prediction du prix"])

    if choix == "Description":
            st.write("""
                ### Description

                Cette application interactive, d√©velopp√©e par Tangara Abdoulaye, est con√ßue pour vous aider √† explorer, analyser et pr√©dire des donn√©es de mani√®re intuitive et efficace.

                **Fonctionnalit√©s principales :**
                - **T√©l√©chargement de donn√©es** : Importez facilement vos fichiers de donn√©es au format CSV, TXT ou DATA.
                - **Analyse exploratoire des donn√©es (EDA)** : Obtenez un aper√ßu complet des variables quantitatives et qualitatives de votre dataset gr√¢ce √† des r√©sum√©s statistiques et des visualisations graphiques.
                - **Nettoyage et traitement des donn√©es** : Remplacez les valeurs manquantes, convertissez les types de colonnes et pr√©parez vos donn√©es pour l'analyse.
                - **Analyse bivari√©e** : Explorez les relations entre deux variables quantitatives gr√¢ce √† des graphiques de corr√©lation et des tests statistiques.
                - **Graphiques interactifs** : Visualisez vos donn√©es avec des boxplots, histogrammes, diagrammes en barre et pie charts pour une compr√©hension approfondie.
                - **Prediction du prix** : Une prediction du prix bas√©e sur le mod√®le KNN est √©galement possible.
                     
                ### Base de donn√©e d'entrainement-test
                     
                **Ce jeu de donn√©es se compose de trois types d'entit√©s** : 
                (a) la sp√©cification d'une voiture en termes de diverses caract√©ristiques 
                (b) son classement de risque d'assurance attribu√©
                (c) ses pertes normalis√©es en utilisation par rapport √† d'autres voitures.
                **La deuxi√®me** √©valuation correspond au degr√© auquel la voiture est plus risqu√©e que son prix ne l'indique.
                Les voitures se voient initialement attribuer un symbole de facteur de risque associ√© √† leur prix.
                Ensuite, si elles sont plus risqu√©es (ou moins), ce symbole est ajust√© en le d√©pla√ßant vers le haut (ou vers le bas) de l'√©chelle.
                Les actuaires appellent ce processus *"symboling"*. Une valeur de +3 indique que la voiture est risqu√©e, -3 qu'elle est probablement assez s√ªre.

                **Le troisi√®me facteur** est le paiement moyen relatif des pertes par ann√©e de v√©hicule assur√©. Cette valeur est normalis√©e pour toutes les voitures dans une classification de taille particuli√®re (petite deux portes, breaks, sport/sp√©cialit√©, etc.), et repr√©sente la perte moyenne par voiture par an.

                -- Note : Plusieurs des attributs de la base de donn√©es pourraient √™tre utilis√©s comme attributs de "classe".
                
            """)
            
    elif choix == "Documentation":
            st.write("""
            ### Documentation

            **Importation des biblioth√®ques :**
            ```python
            import streamlit as st
            import pandas as pd
            import numpy as np
            import seaborn as sns
            ```

            **Variable globale :**
            ```python
            data = None
            ```

            **Fonction principale :**
            ```python
            def main():
                st.header("**BIENVENUE SUR NOTRE PLATFORME !**")
                st.title("ANALYSE ET PREDICTION DE DONNEES")
                st.subheader("Par Tangara Abdoulaye")

                choix = st.sidebar.radio("SousMenu", ["Description", "Documentation"])
                st.sidebar.text("Presentation de l'auteur")
            ```

            Cette fonction configure l'interface utilisateur principale de l'application Streamlit.

            **Ex√©cution de la fonction principale :**
            ```python
            if __name__ == '__main__' : 
                main()
            ```

            **Fonction de charge et de nettoyage des donn√©es :**
            ```python
            def load_data(uploaded_file):
                columns = ['symboling', 'normalized-losses', 'make', 'fuel-type', 'aspiration', 'num-of-doors', 'body-style',
                        'drive-wheels', 'engine-location', 'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-type',
                        'num-of-cylinders', 'engine-size', 'fuel-system', 'bore', 'stroke', 'compression-ratio', 'horsepower',
                        'peak-rpm', 'city-mpg', 'highway-mpg', 'price']
                data = pd.read_csv(uploaded_file, delimiter=",", names=columns)
                if not data.empty:
                    data = data.replace("?", np.nan)
                    columns_to_convert = [col for col in data.columns if col != 'num-of-doors']
                    for col in columns_to_convert:
                        data[col] = pd.to_numeric(data[col], errors='ignore')
                    data['num-of-doors'] = data['num-of-doors'].astype(object)
                    data['normalized-losses'] = data['normalized-losses'].fillna(data['normalized-losses'].mean())
                    data = data.dropna(axis='index')
                    return data
                else:
                    return None
            ```

            Cette fonction charge les donn√©es √† partir d'un fichier t√©l√©charg√© par l'utilisateur, remplace les valeurs manquantes, convertit les types de colonnes appropri√©es et remplit les valeurs manquantes avec la moyenne pour certaines colonnes. Enfin, elle retourne le jeu de donn√©es nettoy√©.
        """)
    elif choix == "Prediction du prix":
      # CHARGEMENT DES MODULES
        st.title("LA PREDICTION DU PRIX DUNE VOITURE")
        st.subheader("Par : Abdoulaye Tangara")
        st.write("")
        # CHARGEMENT DU MODELE
        model = joblib.load("model_prediction")

        # FOCNTION INFERENECE
        def inference(normalized_losses, wheel_base, length, width, height, bore,
            stroke, compression_ratio, horsepower, peak_rpm):
            features = np.array([
                normalized_losses, wheel_base, length, width, height, bore,
            stroke, compression_ratio, horsepower, peak_rpm
                ])
            prediction = model.predict(features.reshape(1,-1))
            return prediction

        # Predictions
        normalized_losses = st.number_input("normalized-losses", value = 0)
        wheel_base = st.number_input("wheel-base", value = 0)
        length = st.number_input("length", value = 0,min_value=0)
        width = st.number_input("width", value = 0,min_value=0)
        height = st.number_input("height", value = 0,min_value=0)
        bore = st.number_input("bore", value = 0)
        stroke = st.number_input("stroke", value = 0)
        compression_ratio = st.number_input("compression-ratio", value = 0)
        horsepower = st.number_input("horsepower", value = 0)
        peak_rpm = st.number_input("peak-rpm", value = 0)

        nom = st.text_input(label = "VEUILLEZ ENTRER VOTRE NOM SVP ! ")

        # LE BOUTTON DE PREDICTION

        if st.button("Predire"):
            prediction = inference(
                normalized_losses,wheel_base,length,width,height,
                bore,stroke,compression_ratio,horsepower,peak_rpm
                )
            resultat = f"Merci M./Mme : {nom}, vous pourrez donc avoir une voiture de : {prediction[0]} $"
            st.success(resultat)
    else:
        st.error("Erreur survenue lors de l'op√©ration, veuillez reprendre s'il vous pla√Æt.")
            


if __name__ == '__main__' : 
    main()


# Fonction de charge et de nettoyage des donn√©es
def load_data(uploaded_file):
    columns = ['symboling', 'normalized-losses', 'make', 'fuel-type', 'aspiration', 'num-of-doors', 'body-style',
               'drive-wheels', 'engine-location', 'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-type',
               'num-of-cylinders', 'engine-size', 'fuel-system', 'bore', 'stroke', 'compression-ratio', 'horsepower',
               'peak-rpm', 'city-mpg', 'highway-mpg', 'price']
    data = pd.read_csv(uploaded_file, delimiter=",", names=columns)
    if not data.empty:
        data = data.replace("?", np.nan)
        columns_to_convert = [col for col in data.columns if col != 'num-of-doors']
        for col in columns_to_convert:
            data[col] = pd.to_numeric(data[col], errors='ignore')
        data['num-of-doors'] = data['num-of-doors'].astype(object)
        data['normalized-losses'] = data['normalized-losses'].fillna(data['normalized-losses'].mean())
        data = data.dropna(axis='index')
        return data
    else:
        return None
    


   
